// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"go.elara.ws/salix/ast"
)

func toAnySlice(v any) []any {
	if v == nil {
		return nil
	}
	return v.([]any)
}

func toNodeSlice(v any) []ast.Node {
	if v == nil {
		return nil
	}
	return v.([]ast.Node)
}

func getPos(c *current) ast.Position {
	return ast.Position{
		Name: c.globalStore["name"].(string),
		Line: c.pos.line,
		Col:  c.pos.col,
	}
}

func toExpr(c *current, first, rest any) ast.Node {
	restSlice := toAnySlice(rest)
	if len(restSlice) == 0 {
		return first.(ast.Node)
	}

	out := ast.Expr{First: first.(ast.Node), Position: getPos(c)}
	for _, restValue := range restSlice {
		valueSlice := toAnySlice(restValue)
		out.Rest = append(out.Rest, ast.Expr{
			Operator: valueSlice[1].(ast.Operator),
			First:    valueSlice[3].(ast.Node),
			Position: valueSlice[3].(ast.Node).Pos(),
		})
	}

	return out
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Root",
			pos:  position{line: 53, col: 1, offset: 1001},
			expr: &actionExpr{
				pos: position{line: 53, col: 8, offset: 1008},
				run: (*parser).callonRoot1,
				expr: &labeledExpr{
					pos:   position{line: 53, col: 8, offset: 1008},
					label: "items",
					expr: &zeroOrMoreExpr{
						pos: position{line: 53, col: 14, offset: 1014},
						expr: &choiceExpr{
							pos: position{line: 53, col: 15, offset: 1015},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 53, col: 15, offset: 1015},
									name: "Tag",
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 21, offset: 1021},
									name: "ExprTag",
								},
								&actionExpr{
									pos: position{line: 71, col: 10, offset: 1455},
									run: (*parser).callonRoot7,
									expr: &seqExpr{
										pos: position{line: 71, col: 10, offset: 1455},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 71, col: 10, offset: 1455},
												val:        "#!",
												ignoreCase: false,
												want:       "\"#!\"",
											},
											&labeledExpr{
												pos:   position{line: 71, col: 15, offset: 1460},
												label: "name",
												expr: &actionExpr{
													pos: position{line: 174, col: 9, offset: 4105},
													run: (*parser).callonRoot11,
													expr: &seqExpr{
														pos: position{line: 174, col: 9, offset: 4105},
														exprs: []any{
															&charClassMatcher{
																pos:        position{line: 174, col: 9, offset: 4105},
																val:        "[a-z]i",
																ranges:     []rune{'a', 'z'},
																ignoreCase: true,
																inverted:   false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 174, col: 16, offset: 4112},
																expr: &charClassMatcher{
																	pos:        position{line: 174, col: 16, offset: 4112},
																	val:        "[_a-z0-9]i",
																	chars:      []rune{'_'},
																	ranges:     []rune{'a', 'z', '0', '9'},
																	ignoreCase: true,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 250, col: 8, offset: 5750},
									run: (*parser).callonRoot16,
									expr: &seqExpr{
										pos: position{line: 250, col: 8, offset: 5750},
										exprs: []any{
											&anyMatcher{
												line: 250, col: 8, offset: 5750,
											},
											&zeroOrMoreExpr{
												pos: position{line: 250, col: 10, offset: 5752},
												expr: &charClassMatcher{
													pos:        position{line: 250, col: 10, offset: 5752},
													val:        "[^#]",
													chars:      []rune{'#'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Tag",
			pos:  position{line: 62, col: 1, offset: 1226},
			expr: &actionExpr{
				pos: position{line: 62, col: 7, offset: 1232},
				run: (*parser).callonTag1,
				expr: &seqExpr{
					pos: position{line: 62, col: 7, offset: 1232},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 62, col: 7, offset: 1232},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 62, col: 11, offset: 1236},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 174, col: 9, offset: 4105},
								run: (*parser).callonTag5,
								expr: &seqExpr{
									pos: position{line: 174, col: 9, offset: 4105},
									exprs: []any{
										&charClassMatcher{
											pos:        position{line: 174, col: 9, offset: 4105},
											val:        "[a-z]i",
											ranges:     []rune{'a', 'z'},
											ignoreCase: true,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 174, col: 16, offset: 4112},
											expr: &charClassMatcher{
												pos:        position{line: 174, col: 16, offset: 4112},
												val:        "[_a-z0-9]i",
												chars:      []rune{'_'},
												ranges:     []rune{'a', 'z', '0', '9'},
												ignoreCase: true,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 22, offset: 1247},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 62, col: 29, offset: 1254},
								expr: &ruleRefExpr{
									pos:  position{line: 62, col: 29, offset: 1254},
									name: "ParamList",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 40, offset: 1265},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 62, col: 45, offset: 1270},
								expr: &litMatcher{
									pos:        position{line: 62, col: 45, offset: 1270},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ExprTag",
			pos:  position{line: 78, col: 1, offset: 1575},
			expr: &actionExpr{
				pos: position{line: 78, col: 11, offset: 1585},
				run: (*parser).callonExprTag1,
				expr: &seqExpr{
					pos: position{line: 78, col: 11, offset: 1585},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 78, col: 11, offset: 1585},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 78, col: 15, offset: 1589},
							label: "ignoreErr",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 25, offset: 1599},
								expr: &litMatcher{
									pos:        position{line: 78, col: 25, offset: 1599},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 78, col: 30, offset: 1604},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 78, col: 34, offset: 1608},
							label: "item",
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 39, offset: 1613},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 78, col: 44, offset: 1618},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Expr",
			pos:  position{line: 86, col: 1, offset: 1771},
			expr: &choiceExpr{
				pos: position{line: 86, col: 8, offset: 1778},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 86, col: 8, offset: 1778},
						name: "Ternary",
					},
					&ruleRefExpr{
						pos:  position{line: 86, col: 18, offset: 1788},
						name: "Assignment",
					},
					&ruleRefExpr{
						pos:  position{line: 86, col: 31, offset: 1801},
						name: "LogicalExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Assignable",
			pos:  position{line: 87, col: 1, offset: 1813},
			expr: &choiceExpr{
				pos: position{line: 87, col: 14, offset: 1826},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 87, col: 14, offset: 1826},
						name: "Ternary",
					},
					&ruleRefExpr{
						pos:  position{line: 87, col: 24, offset: 1836},
						name: "LogicalExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "LogicalExpr",
			pos:  position{line: 89, col: 1, offset: 1849},
			expr: &actionExpr{
				pos: position{line: 89, col: 15, offset: 1863},
				run: (*parser).callonLogicalExpr1,
				expr: &seqExpr{
					pos: position{line: 89, col: 15, offset: 1863},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 17, offset: 1865},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 23, offset: 1871},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 38, offset: 1886},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 89, col: 43, offset: 1891},
								expr: &seqExpr{
									pos: position{line: 89, col: 44, offset: 1892},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 252, col: 18, offset: 5838},
											expr: &charClassMatcher{
												pos:        position{line: 252, col: 18, offset: 5838},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 229, col: 13, offset: 5309},
											run: (*parser).callonLogicalExpr12,
											expr: &choiceExpr{
												pos: position{line: 229, col: 14, offset: 5310},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 229, col: 14, offset: 5310},
														val:        "||",
														ignoreCase: false,
														want:       "\"||\"",
													},
													&litMatcher{
														pos:        position{line: 229, col: 21, offset: 5317},
														val:        "&&",
														ignoreCase: false,
														want:       "\"&&\"",
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 252, col: 18, offset: 5838},
											expr: &charClassMatcher{
												pos:        position{line: 252, col: 18, offset: 5838},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&ruleRefExpr{
											pos:  position{line: 89, col: 58, offset: 1906},
											name: "ComparisonExpr",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 93, col: 1, offset: 1969},
			expr: &actionExpr{
				pos: position{line: 93, col: 18, offset: 1986},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 93, col: 18, offset: 1986},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 20, offset: 1988},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 93, col: 26, offset: 1994},
								name: "ArithmeticExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 41, offset: 2009},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 93, col: 46, offset: 2014},
								expr: &seqExpr{
									pos: position{line: 93, col: 47, offset: 2015},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 252, col: 18, offset: 5838},
											expr: &charClassMatcher{
												pos:        position{line: 252, col: 18, offset: 5838},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 236, col: 16, offset: 5442},
											run: (*parser).callonComparisonExpr12,
											expr: &choiceExpr{
												pos: position{line: 236, col: 17, offset: 5443},
												alternatives: []any{
													&litMatcher{
														pos:        position{line: 236, col: 17, offset: 5443},
														val:        "==",
														ignoreCase: false,
														want:       "\"==\"",
													},
													&litMatcher{
														pos:        position{line: 236, col: 24, offset: 5450},
														val:        "!=",
														ignoreCase: false,
														want:       "\"!=\"",
													},
													&litMatcher{
														pos:        position{line: 236, col: 31, offset: 5457},
														val:        "<=",
														ignoreCase: false,
														want:       "\"<=\"",
													},
													&litMatcher{
														pos:        position{line: 236, col: 38, offset: 5464},
														val:        ">=",
														ignoreCase: false,
														want:       "\">=\"",
													},
													&charClassMatcher{
														pos:        position{line: 236, col: 45, offset: 5471},
														val:        "[<>]",
														chars:      []rune{'<', '>'},
														ignoreCase: false,
														inverted:   false,
													},
													&litMatcher{
														pos:        position{line: 236, col: 57, offset: 5483},
														val:        "in",
														ignoreCase: true,
														want:       "\"in\"i",
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 252, col: 18, offset: 5838},
											expr: &charClassMatcher{
												pos:        position{line: 252, col: 18, offset: 5838},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&ruleRefExpr{
											pos:  position{line: 93, col: 64, offset: 2032},
											name: "ArithmeticExpr",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArithmeticExpr",
			pos:  position{line: 97, col: 1, offset: 2095},
			expr: &actionExpr{
				pos: position{line: 97, col: 18, offset: 2112},
				run: (*parser).callonArithmeticExpr1,
				expr: &seqExpr{
					pos: position{line: 97, col: 18, offset: 2112},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 20, offset: 2114},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 97, col: 26, offset: 2120},
								name: "Value",
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 32, offset: 2126},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 97, col: 37, offset: 2131},
								expr: &seqExpr{
									pos: position{line: 97, col: 38, offset: 2132},
									exprs: []any{
										&zeroOrMoreExpr{
											pos: position{line: 252, col: 18, offset: 5838},
											expr: &charClassMatcher{
												pos:        position{line: 252, col: 18, offset: 5838},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 243, col: 16, offset: 5609},
											run: (*parser).callonArithmeticExpr12,
											expr: &charClassMatcher{
												pos:        position{line: 243, col: 17, offset: 5610},
												val:        "[+-/*%]",
												chars:      []rune{'+', '-', '/', '*', '%'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 252, col: 18, offset: 5838},
											expr: &charClassMatcher{
												pos:        position{line: 252, col: 18, offset: 5838},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&ruleRefExpr{
											pos:  position{line: 97, col: 55, offset: 2149},
											name: "Value",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParenExpr",
			pos:  position{line: 101, col: 1, offset: 2203},
			expr: &actionExpr{
				pos: position{line: 101, col: 13, offset: 2215},
				run: (*parser).callonParenExpr1,
				expr: &seqExpr{
					pos: position{line: 101, col: 13, offset: 2215},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 101, col: 13, offset: 2215},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 101, col: 17, offset: 2219},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 101, col: 22, offset: 2224},
								name: "Expr",
							},
						},
						&litMatcher{
							pos:        position{line: 101, col: 27, offset: 2229},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParamList",
			pos:  position{line: 105, col: 1, offset: 2259},
			expr: &actionExpr{
				pos: position{line: 105, col: 13, offset: 2271},
				run: (*parser).callonParamList1,
				expr: &seqExpr{
					pos: position{line: 105, col: 13, offset: 2271},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 105, col: 13, offset: 2271},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 105, col: 17, offset: 2275},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 105, col: 24, offset: 2282},
								expr: &seqExpr{
									pos: position{line: 105, col: 25, offset: 2283},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 105, col: 25, offset: 2283},
											name: "Expr",
										},
										&zeroOrMoreExpr{
											pos: position{line: 105, col: 30, offset: 2288},
											expr: &seqExpr{
												pos: position{line: 105, col: 32, offset: 2290},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 105, col: 32, offset: 2290},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 252, col: 18, offset: 5838},
														expr: &charClassMatcher{
															pos:        position{line: 252, col: 18, offset: 5838},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&ruleRefExpr{
														pos:  position{line: 105, col: 38, offset: 2296},
														name: "Expr",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 105, col: 49, offset: 2307},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Value",
			pos:  position{line: 119, col: 1, offset: 2669},
			expr: &actionExpr{
				pos: position{line: 119, col: 9, offset: 2677},
				run: (*parser).callonValue1,
				expr: &seqExpr{
					pos: position{line: 119, col: 9, offset: 2677},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 119, col: 9, offset: 2677},
							label: "not",
							expr: &zeroOrOneExpr{
								pos: position{line: 119, col: 13, offset: 2681},
								expr: &litMatcher{
									pos:        position{line: 119, col: 13, offset: 2681},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 18, offset: 2686},
							label: "node",
							expr: &choiceExpr{
								pos: position{line: 119, col: 24, offset: 2692},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 119, col: 24, offset: 2692},
										name: "MethodCall",
									},
									&ruleRefExpr{
										pos:  position{line: 119, col: 37, offset: 2705},
										name: "FieldAccess",
									},
									&ruleRefExpr{
										pos:  position{line: 119, col: 51, offset: 2719},
										name: "Index",
									},
									&actionExpr{
										pos: position{line: 205, col: 10, offset: 4812},
										run: (*parser).callonValue11,
										expr: &seqExpr{
											pos: position{line: 205, col: 10, offset: 4812},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 205, col: 10, offset: 4812},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&labeledExpr{
													pos:   position{line: 205, col: 14, offset: 4816},
													label: "value",
													expr: &zeroOrMoreExpr{
														pos: position{line: 205, col: 20, offset: 4822},
														expr: &charClassMatcher{
															pos:        position{line: 205, col: 20, offset: 4822},
															val:        "[^\"]",
															chars:      []rune{'"'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 205, col: 26, offset: 4828},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 213, col: 13, offset: 4979},
										run: (*parser).callonValue18,
										expr: &seqExpr{
											pos: position{line: 213, col: 13, offset: 4979},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 213, col: 13, offset: 4979},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&labeledExpr{
													pos:   position{line: 213, col: 17, offset: 4983},
													label: "value",
													expr: &zeroOrMoreExpr{
														pos: position{line: 213, col: 23, offset: 4989},
														expr: &charClassMatcher{
															pos:        position{line: 213, col: 23, offset: 4989},
															val:        "[^`]",
															chars:      []rune{'`'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 213, col: 29, offset: 4995},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 197, col: 9, offset: 4631},
										run: (*parser).callonValue25,
										expr: &seqExpr{
											pos: position{line: 197, col: 9, offset: 4631},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 197, col: 9, offset: 4631},
													expr: &litMatcher{
														pos:        position{line: 197, col: 9, offset: 4631},
														val:        "-",
														ignoreCase: false,
														want:       "\"-\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 197, col: 14, offset: 4636},
													label: "value",
													expr: &seqExpr{
														pos: position{line: 197, col: 21, offset: 4643},
														exprs: []any{
															&oneOrMoreExpr{
																pos: position{line: 197, col: 21, offset: 4643},
																expr: &charClassMatcher{
																	pos:        position{line: 197, col: 21, offset: 4643},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 197, col: 28, offset: 4650},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&oneOrMoreExpr{
																pos: position{line: 197, col: 32, offset: 4654},
																expr: &charClassMatcher{
																	pos:        position{line: 197, col: 32, offset: 4654},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 189, col: 11, offset: 4420},
										run: (*parser).callonValue36,
										expr: &seqExpr{
											pos: position{line: 189, col: 11, offset: 4420},
											exprs: []any{
												&zeroOrOneExpr{
													pos: position{line: 189, col: 11, offset: 4420},
													expr: &litMatcher{
														pos:        position{line: 189, col: 11, offset: 4420},
														val:        "-",
														ignoreCase: false,
														want:       "\"-\"",
													},
												},
												&choiceExpr{
													pos: position{line: 189, col: 17, offset: 4426},
													alternatives: []any{
														&seqExpr{
															pos: position{line: 189, col: 17, offset: 4426},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 189, col: 17, offset: 4426},
																	val:        "0x",
																	ignoreCase: false,
																	want:       "\"0x\"",
																},
																&oneOrMoreExpr{
																	pos: position{line: 189, col: 22, offset: 4431},
																	expr: &charClassMatcher{
																		pos:        position{line: 189, col: 22, offset: 4431},
																		val:        "[0-9a-f]i",
																		ranges:     []rune{'0', '9', 'a', 'f'},
																		ignoreCase: true,
																		inverted:   false,
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 189, col: 35, offset: 4444},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 189, col: 35, offset: 4444},
																	val:        "0o",
																	ignoreCase: false,
																	want:       "\"0o\"",
																},
																&oneOrMoreExpr{
																	pos: position{line: 189, col: 40, offset: 4449},
																	expr: &charClassMatcher{
																		pos:        position{line: 189, col: 40, offset: 4449},
																		val:        "[0-7]",
																		ranges:     []rune{'0', '7'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 189, col: 49, offset: 4458},
															exprs: []any{
																&litMatcher{
																	pos:        position{line: 189, col: 49, offset: 4458},
																	val:        "0b",
																	ignoreCase: false,
																	want:       "\"0b\"",
																},
																&oneOrMoreExpr{
																	pos: position{line: 189, col: 54, offset: 4463},
																	expr: &charClassMatcher{
																		pos:        position{line: 189, col: 54, offset: 4463},
																		val:        "[01]",
																		chars:      []rune{'0', '1'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 189, col: 62, offset: 4471},
															expr: &charClassMatcher{
																pos:        position{line: 189, col: 62, offset: 4471},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 221, col: 8, offset: 5141},
										run: (*parser).callonValue55,
										expr: &choiceExpr{
											pos: position{line: 221, col: 9, offset: 5142},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 221, col: 9, offset: 5142},
													val:        "true",
													ignoreCase: true,
													want:       "\"true\"i",
												},
												&litMatcher{
													pos:        position{line: 221, col: 19, offset: 5152},
													val:        "false",
													ignoreCase: true,
													want:       "\"false\"i",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 119, col: 105, offset: 2773},
										name: "FuncCall",
									},
									&ruleRefExpr{
										pos:  position{line: 119, col: 116, offset: 2784},
										name: "VariableOr",
									},
									&actionExpr{
										pos: position{line: 174, col: 9, offset: 4105},
										run: (*parser).callonValue61,
										expr: &seqExpr{
											pos: position{line: 174, col: 9, offset: 4105},
											exprs: []any{
												&charClassMatcher{
													pos:        position{line: 174, col: 9, offset: 4105},
													val:        "[a-z]i",
													ranges:     []rune{'a', 'z'},
													ignoreCase: true,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 174, col: 16, offset: 4112},
													expr: &charClassMatcher{
														pos:        position{line: 174, col: 16, offset: 4112},
														val:        "[_a-z0-9]i",
														chars:      []rune{'_'},
														ranges:     []rune{'a', 'z', '0', '9'},
														ignoreCase: true,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 119, col: 137, offset: 2805},
										name: "ParenExpr",
									},
								},
							},
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "VariableOr",
			pos:  position{line: 126, col: 1, offset: 2911},
			expr: &actionExpr{
				pos: position{line: 126, col: 14, offset: 2924},
				run: (*parser).callonVariableOr1,
				expr: &seqExpr{
					pos: position{line: 126, col: 14, offset: 2924},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 126, col: 14, offset: 2924},
							label: "variable",
							expr: &actionExpr{
								pos: position{line: 174, col: 9, offset: 4105},
								run: (*parser).callonVariableOr4,
								expr: &seqExpr{
									pos: position{line: 174, col: 9, offset: 4105},
									exprs: []any{
										&charClassMatcher{
											pos:        position{line: 174, col: 9, offset: 4105},
											val:        "[a-z]i",
											ranges:     []rune{'a', 'z'},
											ignoreCase: true,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 174, col: 16, offset: 4112},
											expr: &charClassMatcher{
												pos:        position{line: 174, col: 16, offset: 4112},
												val:        "[_a-z0-9]i",
												chars:      []rune{'_'},
												ranges:     []rune{'a', 'z', '0', '9'},
												ignoreCase: true,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 126, col: 31, offset: 2941},
							val:        "|",
							ignoreCase: false,
							want:       "\"|\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 37, offset: 2947},
							label: "or",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 40, offset: 2950},
								name: "Assignable",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Assignment",
			pos:  position{line: 133, col: 1, offset: 3077},
			expr: &actionExpr{
				pos: position{line: 133, col: 14, offset: 3090},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 133, col: 14, offset: 3090},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 133, col: 14, offset: 3090},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 174, col: 9, offset: 4105},
								run: (*parser).callonAssignment4,
								expr: &seqExpr{
									pos: position{line: 174, col: 9, offset: 4105},
									exprs: []any{
										&charClassMatcher{
											pos:        position{line: 174, col: 9, offset: 4105},
											val:        "[a-z]i",
											ranges:     []rune{'a', 'z'},
											ignoreCase: true,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 174, col: 16, offset: 4112},
											expr: &charClassMatcher{
												pos:        position{line: 174, col: 16, offset: 4112},
												val:        "[_a-z0-9]i",
												chars:      []rune{'_'},
												ranges:     []rune{'a', 'z', '0', '9'},
												ignoreCase: true,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 133, col: 27, offset: 3103},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 133, col: 33, offset: 3109},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 39, offset: 3115},
								name: "Assignable",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Ternary",
			pos:  position{line: 141, col: 1, offset: 3270},
			expr: &actionExpr{
				pos: position{line: 141, col: 11, offset: 3280},
				run: (*parser).callonTernary1,
				expr: &seqExpr{
					pos: position{line: 141, col: 11, offset: 3280},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 141, col: 11, offset: 3280},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 141, col: 16, offset: 3285},
								name: "Assignable",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 141, col: 29, offset: 3298},
							val:        "?",
							ignoreCase: false,
							want:       "\"?\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 141, col: 35, offset: 3304},
							label: "ifTrue",
							expr: &ruleRefExpr{
								pos:  position{line: 141, col: 42, offset: 3311},
								name: "Value",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 141, col: 50, offset: 3319},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 18, offset: 5838},
							expr: &charClassMatcher{
								pos:        position{line: 252, col: 18, offset: 5838},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 141, col: 56, offset: 3325},
							label: "elseVal",
							expr: &ruleRefExpr{
								pos:  position{line: 141, col: 64, offset: 3333},
								name: "Value",
							},
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "MethodCall",
			pos:  position{line: 149, col: 1, offset: 3492},
			expr: &actionExpr{
				pos: position{line: 149, col: 14, offset: 3505},
				run: (*parser).callonMethodCall1,
				expr: &seqExpr{
					pos: position{line: 149, col: 14, offset: 3505},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 149, col: 14, offset: 3505},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 149, col: 20, offset: 3511},
								name: "Value",
							},
						},
						&litMatcher{
							pos:        position{line: 149, col: 26, offset: 3517},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 149, col: 30, offset: 3521},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 174, col: 9, offset: 4105},
								run: (*parser).callonMethodCall7,
								expr: &seqExpr{
									pos: position{line: 174, col: 9, offset: 4105},
									exprs: []any{
										&charClassMatcher{
											pos:        position{line: 174, col: 9, offset: 4105},
											val:        "[a-z]i",
											ranges:     []rune{'a', 'z'},
											ignoreCase: true,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 174, col: 16, offset: 4112},
											expr: &charClassMatcher{
												pos:        position{line: 174, col: 16, offset: 4112},
												val:        "[_a-z0-9]i",
												chars:      []rune{'_'},
												ranges:     []rune{'a', 'z', '0', '9'},
												ignoreCase: true,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 149, col: 41, offset: 3532},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 149, col: 48, offset: 3539},
								name: "ParamList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "Index",
			pos:  position{line: 158, col: 1, offset: 3732},
			expr: &actionExpr{
				pos: position{line: 158, col: 9, offset: 3740},
				run: (*parser).callonIndex1,
				expr: &seqExpr{
					pos: position{line: 158, col: 9, offset: 3740},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 158, col: 9, offset: 3740},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 158, col: 15, offset: 3746},
								name: "Value",
							},
						},
						&litMatcher{
							pos:        position{line: 158, col: 21, offset: 3752},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 158, col: 25, offset: 3756},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 158, col: 31, offset: 3762},
								name: "Value",
							},
						},
						&litMatcher{
							pos:        position{line: 158, col: 37, offset: 3768},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "FieldAccess",
			pos:  position{line: 166, col: 1, offset: 3911},
			expr: &actionExpr{
				pos: position{line: 166, col: 15, offset: 3925},
				run: (*parser).callonFieldAccess1,
				expr: &seqExpr{
					pos: position{line: 166, col: 15, offset: 3925},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 166, col: 15, offset: 3925},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 21, offset: 3931},
								name: "Value",
							},
						},
						&litMatcher{
							pos:        position{line: 166, col: 27, offset: 3937},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 31, offset: 3941},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 174, col: 9, offset: 4105},
								run: (*parser).callonFieldAccess7,
								expr: &seqExpr{
									pos: position{line: 174, col: 9, offset: 4105},
									exprs: []any{
										&charClassMatcher{
											pos:        position{line: 174, col: 9, offset: 4105},
											val:        "[a-z]i",
											ranges:     []rune{'a', 'z'},
											ignoreCase: true,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 174, col: 16, offset: 4112},
											expr: &charClassMatcher{
												pos:        position{line: 174, col: 16, offset: 4112},
												val:        "[_a-z0-9]i",
												chars:      []rune{'_'},
												ranges:     []rune{'a', 'z', '0', '9'},
												ignoreCase: true,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "FuncCall",
			pos:  position{line: 181, col: 1, offset: 4226},
			expr: &actionExpr{
				pos: position{line: 181, col: 12, offset: 4237},
				run: (*parser).callonFuncCall1,
				expr: &seqExpr{
					pos: position{line: 181, col: 12, offset: 4237},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 181, col: 12, offset: 4237},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 174, col: 9, offset: 4105},
								run: (*parser).callonFuncCall4,
								expr: &seqExpr{
									pos: position{line: 174, col: 9, offset: 4105},
									exprs: []any{
										&charClassMatcher{
											pos:        position{line: 174, col: 9, offset: 4105},
											val:        "[a-z]i",
											ranges:     []rune{'a', 'z'},
											ignoreCase: true,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 174, col: 16, offset: 4112},
											expr: &charClassMatcher{
												pos:        position{line: 174, col: 16, offset: 4112},
												val:        "[_a-z0-9]i",
												chars:      []rune{'_'},
												ranges:     []rune{'a', 'z', '0', '9'},
												ignoreCase: true,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 181, col: 23, offset: 4248},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 30, offset: 4255},
								name: "ParamList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) onRoot11() (any, error) {

	return ast.Ident{
		Value:    string(c.text),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonRoot11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRoot11()
}

func (c *current) onRoot7(name any) (any, error) {
	return ast.EndTag{
		Name:     name.(ast.Ident),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonRoot7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRoot7(stack["name"])
}

func (c *current) onRoot16() (any, error) {
	return ast.Text{Data: c.text, Position: getPos(c)}, nil
}

func (p *parser) callonRoot16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRoot16()
}

func (c *current) onRoot1(items any) (any, error) {
	itemSlice := toAnySlice(items)
	out := make([]ast.Node, len(itemSlice))
	for i, item := range itemSlice {
		out[i] = item.(ast.Node)
	}
	return out, nil
}

func (p *parser) callonRoot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRoot1(stack["items"])
}

func (c *current) onTag5() (any, error) {

	return ast.Ident{
		Value:    string(c.text),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonTag5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTag5()
}

func (c *current) onTag1(name, params, body any) (any, error) {
	return ast.Tag{
		Name:     name.(ast.Ident),
		Params:   toNodeSlice(params),
		HasBody:  body != nil,
		Position: getPos(c),
	}, nil
}

func (p *parser) callonTag1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTag1(stack["name"], stack["params"], stack["body"])
}

func (c *current) onExprTag1(ignoreErr, item any) (any, error) {
	return ast.ExprTag{
		Value:       item.(ast.Node),
		IgnoreError: ignoreErr != nil,
		Position:    getPos(c),
	}, nil
}

func (p *parser) callonExprTag1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprTag1(stack["ignoreErr"], stack["item"])
}

func (c *current) onLogicalExpr12() (any, error) {
	return ast.Operator{
		Value:    string(c.text),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonLogicalExpr12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalExpr12()
}

func (c *current) onLogicalExpr1(first, rest any) (any, error) {
	return toExpr(c, first, rest), nil
}

func (p *parser) callonLogicalExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr12() (any, error) {
	return ast.Operator{
		Value:    string(c.text),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonComparisonExpr12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr12()
}

func (c *current) onComparisonExpr1(first, rest any) (any, error) {
	return toExpr(c, first, rest), nil
}

func (p *parser) callonComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["first"], stack["rest"])
}

func (c *current) onArithmeticExpr12() (any, error) {
	return ast.Operator{
		Value:    string(c.text),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonArithmeticExpr12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr12()
}

func (c *current) onArithmeticExpr1(first, rest any) (any, error) {
	return toExpr(c, first, rest), nil
}

func (p *parser) callonArithmeticExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr1(stack["first"], stack["rest"])
}

func (c *current) onParenExpr1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonParenExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpr1(stack["expr"])
}

func (c *current) onParamList1(params any) (any, error) {
	paramSlice := toAnySlice(params)
	if len(paramSlice) == 0 {
		return []ast.Node{}, nil
	}
	out := []ast.Node{paramSlice[0].(ast.Node)}
	restSlice := toAnySlice(paramSlice[1])
	for _, value := range restSlice {
		valueSlice := toAnySlice(value)
		out = append(out, valueSlice[2].(ast.Node))
	}
	return out, nil
}

func (p *parser) callonParamList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParamList1(stack["params"])
}

func (c *current) onValue11(value any) (any, error) {
	s, err := strconv.Unquote(string(c.text))
	return ast.String{
		Value:    s,
		Position: getPos(c),
	}, err
}

func (p *parser) callonValue11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue11(stack["value"])
}

func (c *current) onValue18(value any) (any, error) {
	s, err := strconv.Unquote(string(c.text))
	return ast.String{
		Value:    s,
		Position: getPos(c),
	}, err
}

func (p *parser) callonValue18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue18(stack["value"])
}

func (c *current) onValue25(value any) (any, error) {
	f, err := strconv.ParseFloat(string(c.text), 64)
	return ast.Float{
		Value:    f,
		Position: getPos(c),
	}, err
}

func (p *parser) callonValue25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue25(stack["value"])
}

func (c *current) onValue36() (any, error) {
	i, err := strconv.ParseInt(string(c.text), 0, 64)
	return ast.Integer{
		Value:    i,
		Position: getPos(c),
	}, err
}

func (p *parser) callonValue36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue36()
}

func (c *current) onValue55() (any, error) {
	b, err := strconv.ParseBool(string(c.text))
	return ast.Bool{
		Value:    b,
		Position: getPos(c),
	}, err
}

func (p *parser) callonValue55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue55()
}

func (c *current) onValue61() (any, error) {

	return ast.Ident{
		Value:    string(c.text),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonValue61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue61()
}

func (c *current) onValue1(not, node any) (any, error) {
	return ast.Value{
		Node: node.(ast.Node),
		Not:  not != nil,
	}, nil
}

func (p *parser) callonValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue1(stack["not"], stack["node"])
}

func (c *current) onVariableOr4() (any, error) {

	return ast.Ident{
		Value:    string(c.text),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonVariableOr4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariableOr4()
}

func (c *current) onVariableOr1(variable, or any) (any, error) {
	return ast.VariableOr{
		Variable: variable.(ast.Ident),
		Or:       or.(ast.Node),
	}, nil
}

func (p *parser) callonVariableOr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariableOr1(stack["variable"], stack["or"])
}

func (c *current) onAssignment4() (any, error) {

	return ast.Ident{
		Value:    string(c.text),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonAssignment4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment4()
}

func (c *current) onAssignment1(name, value any) (any, error) {
	return ast.Assignment{
		Name:     name.(ast.Ident),
		Value:    value.(ast.Node),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonAssignment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["name"], stack["value"])
}

func (c *current) onTernary1(cond, ifTrue, elseVal any) (any, error) {
	return ast.Ternary{
		Condition: cond.(ast.Node),
		IfTrue:    ifTrue.(ast.Node),
		Else:      elseVal.(ast.Node),
	}, nil
}

func (p *parser) callonTernary1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTernary1(stack["cond"], stack["ifTrue"], stack["elseVal"])
}

func (c *current) onMethodCall7() (any, error) {

	return ast.Ident{
		Value:    string(c.text),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonMethodCall7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethodCall7()
}

func (c *current) onMethodCall1(value, name, params any) (any, error) {
	return ast.MethodCall{
		Value:    value.(ast.Node),
		Name:     name.(ast.Ident),
		Params:   toNodeSlice(params),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonMethodCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethodCall1(stack["value"], stack["name"], stack["params"])
}

func (c *current) onIndex1(value, index any) (any, error) {
	return ast.Index{
		Value:    value.(ast.Node),
		Index:    index.(ast.Node),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonIndex1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndex1(stack["value"], stack["index"])
}

func (c *current) onFieldAccess7() (any, error) {

	return ast.Ident{
		Value:    string(c.text),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonFieldAccess7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldAccess7()
}

func (c *current) onFieldAccess1(value, name any) (any, error) {
	return ast.FieldAccess{
		Value:    value.(ast.Node),
		Name:     name.(ast.Ident),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonFieldAccess1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldAccess1(stack["value"], stack["name"])
}

func (c *current) onFuncCall4() (any, error) {

	return ast.Ident{
		Value:    string(c.text),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonFuncCall4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncCall4()
}

func (c *current) onFuncCall1(name, params any) (any, error) {
	return ast.FuncCall{
		Name:     name.(ast.Ident),
		Params:   toNodeSlice(params),
		Position: getPos(c),
	}, nil
}

func (p *parser) callonFuncCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncCall1(stack["name"], stack["params"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	if rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
